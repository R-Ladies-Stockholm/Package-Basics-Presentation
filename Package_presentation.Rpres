<style>
body {
      background-image: 
      url(https://raw.githubusercontent.com/rladies/starter-kit/master/stickers/hex-logo-with-text.png);
      background-position: left bottom;
      background-attachment: fixed;
      background-repeat: no-repeat;
      background-size: 15% 30%;
}

.section .reveal .state-background {
    background: #2d6b74; 
    background-image: 
    url(https://raw.githubusercontent.com/rladies/starter-kit/master/stickers/hex-logo-with-text.png);
    background-position: right bottom;
    background-attachment: fixed;
    background-repeat: no-repeat;
    background-size: 30% 60%;
}
</style>

Basics in R package Building: user centered problems and solutions
========================================
author: Elisabeth Dahlqwist & Nissa Ferm
date: R-Ladies Stockholm on October 23, 2019
font-import: http://fonts.googleapis.com/css?family=Mansalva
font-family: 'Mansalva'


Elisabeth Dahlqwist
========================================================
Cool things about me...

- Biostatistician
- neato thing two

Nissa Ferm 
========================================================
incremental: true

```{r include=FALSE}
library(emo)
```

![alt text](Package_presentation_files/Eating_krill.JPG)
***
- Recent transplant to Stockholm.
- Government fishereies researcher turned data scientist .
- Built R-packages FastrCAT, rrza, and fishgutr.
- Made my first PR during Tidyverse Dev Day on the dplyr package `r emo::ji("party_popper")`.
- I also love crafting and sea critters `r emo::ji("heart_eyes")`!

R Packages on CRAN
========================================================
incremental: true 
left:60%

```{r include=FALSE}
library(tidyverse)
library(gganimate)
library(lubridate)
library(ggthemes)
library(rvest)
```

```{r eval=FALSE, include=FALSE}
url <- "https://cran.r-project.org/web/packages/available_packages_by_date.html"

cran_pkgs <- url %>%
  read_html() %>%
  html_node(xpath='/html/body/table') %>%
  html_table()

cran_pkgs <- cran_pkgs %>%
  dplyr::mutate(Date = lubridate::ymd(Date)) %>%
  dplyr::arrange(Date) %>%
  dplyr::mutate(pkg = 1) %>%
  dplyr::mutate(cum_pkgs = cumsum(pkg))

readr::write_csv(cran_pkgs, "Package_presentation_files/cran_pkgs.csv")
```

```{r echo=FALSE }
#Static plot
cran_pkg_data <- readr::read_csv("Package_presentation_files/cran_pkgs.csv")

cran_plot <- ggplot2::ggplot(cran_pkg_data,
                             ggplot2::aes(Date, cum_pkgs)) +
  ggplot2::geom_line(color = "#aa4b6b", size = 1) +
  ggplot2::labs(x = "Year", y = "Number of Packages") +
  ggthemes::theme_clean() +
  ggplot2::theme(
    axis.text = ggplot2::element_text(color= "black",
                                      size = 16),
    axis.title = ggplot2::element_text(color= "black",
                                      size = 20),
    plot.background = ggplot2::element_blank(),
    axis.line = ggplot2::element_line(color = "black"),
    plot.margin = ggplot2::margin(20, 20, 20, 20, "pt")
  )
  
cran_plot +
  geom_point(color = "#6b6b83" , size = 4)+
  gganimate::transition_reveal(Date)

```
***
As of this year
- 15007 on CRAN 
- ~ 2116 on GitHub (includes dev versions of CRAN Packages)
- 1741 on BioConductor
- ~ 18864 + known packages!  `r emo::ji("exploding_head")`

```{r eval=FALSE, include=FALSE}
# https://cran.r-project.org/web/packages/ 
# https://github.com/topics/r scoped to "package"
# https://www.bioconductor.org/ 
# these don't include all the personal packages and those that private companies hold so it's
# possible that there are way more than 18864 known R packages
```

So many packages, why make more?
========================================================
incremental: true 

- The package doesn't have to be on CRAN
- It can be specific to your use case or general
- Easily sharable, method development
- Encapsulates a project, all files in one place


Elisabeth why I built a package
========================================================

- share new stats methods


Nissa why I built a package
========================================================

- smooth data management for oceanographic data


First Steps: Picking a Style -E
========================================================
![ab fab](https://images.app.goo.gl/W1jmwRMGVPXT1eFZA)

***
- human readable code , pretty
- Google Style Guide, functional thinking
- Tidyverse Style Guide


What is human readable code? -N
========================================================
- nouns
- verbs
- snake_case, CamelCase, dot.case (dot has meaning)


Documentation
========================================================

- how creating a package forces you to document everything
- documentation is realtive to your audience
- unhelpful documentation
- helpful documentation


Documentation - E
========================================================
- function documentation example
- why is this helpful
- give a reproducable example
- who are your users and how you write the documentation
- example glm object


Documentation
========================================================
- package level example
- why is this helpful
- should you add a data set


Documentation
========================================================
- vingette example
- you want your users to understand, give examples


Elisabeth Example One
=======================================================

- targeting your users
- Journal Article about package and examples with theory
- what to do, documentation in line level you expect from users

Nissa Example One
=======================================================
- how error writing is documentation too
- writting errors to help your users

Careful with your dependencies
=======================================================
![image of long depency load]()
***
- some overview of dependencies


Elisabeth Example Two
=======================================================

- import vs depends
- which r version with uploading to CRAN r devel


Nissa Example Two
=======================================================
- maps without the internet
- why I didn't use ggmap
- how did I realize this was an issue
- how did I solve this issue
- where it went in the package folder hierarchy
- what were all the packages I used
- show how it was written in the package/ folders

How your users interct with your package
=======================================================
![human package interaction]()
***
- transition slide
- interacting

Elisabeth Example Three
=======================================================

- what is the output of your package
- in r oop, classes
- print glm and formats example, plot function
- model object look similar across packages



Nissa Example Three
=======================================================

- from the console
- why I did it this way for my users
- how you share





Last Slide 
========================================================
- live package build in Rstudio

First Slide
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet 2
- Bullet 3

Slide With Code
========================================================

```{r}
summary(cars)
```

Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```
